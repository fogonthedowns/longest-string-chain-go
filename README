Given a list of words, each word consists of English lowercase letters.

Let's say word1 is a predecessor of word2 if and only if we can add exactly one letter anywhere in word1 to make it equal to word2.  For example, "abc" is a predecessor of "abac".

A word chain is a sequence of words [word_1, word_2, ..., word_k] with k >= 1, where word_1 is a predecessor of word_2, word_2 is a predecessor of word_3, and so on.

Return the longest possible length of a word chain with words chosen from the given list of words.

Example 1:

Input: ["a","b","ba","bca","bda","bdca"]
Output: 4
Explanation: one of the longest word chain is "a","ba","bda","bdca".


Algorithm

1. Create a Set - this does not exist in go so we create at new type with map[string]struct{}
2. Add words to Set, create a map string:count
3. Loop over words, calling recursive function trace(). Set the result to maxLen = max(trace(), prev)
4. Trace:
    * takes a Set, word:count map, word 
    * Trace returns count
  * First check if word is in word:count map, if so return
  * Next, Build all permutations of word, by looping over word
      * p := word[:i] + word[i+1:]
    * check if permutation is in Set
      * if so recursivly call Trace
        * set count = max(Trace(), count)
  * increment map, with result from recursion. word:count = count + 1
  * return the count for each word

